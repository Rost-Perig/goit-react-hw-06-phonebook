{"version":3,"sources":["componets/ContactList/ContactList.module.css","componets/ContactData/ContactData.module.css","componets/FindForm/FindForm.module.css","componets/Section/Section.js","redux/contacts/contacts-actions.js","componets/InputsForm/InputsForm.js","redux/contacts/contacts-selectors.js","componets/ContactData/ContactData.js","componets/FindForm/FindForm.js","componets/ContactList/ContactList.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","componets/InputsForm/InputsForm.module.css"],"names":["module","exports","Section","children","title","className","addition","createAction","deletion","search","InputsForm","useState","subscriber","setSubscriber","number","setNumber","id","setId","dispatch","useDispatch","handleInputChange","e","currentTarget","name","value","uuidv4","reset","s","frame","onSubmit","preventDefault","form","autoComplete","input","type","onChange","pattern","required","btn","getContactsItems","state","contacts","items","getContactsFilter","filter","ContactData","contactObj","textItem","onClick","idToDel","target","dataset","key","FindForm","inputValue","setInputValue","ContactList","contactArr","useSelector","findValue","tempContactArr","sort","a","b","localeCompare","list","item","toLowerCase","includes","map","listItem","App","createReducer","payload","findIndex","alert","tempArr","splice","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistConfig","storage","rootReducer","contactsReducer","persistedReducer","persistReducer","store","configureStore","reducer","devTools","process","modStore","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.08974893.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2E3fB\",\"listItem\":\"ContactList_listItem__2s3je\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textItem\":\"ContactData_textItem__Z7Ngg\",\"btn\":\"ContactData_btn__1YCJY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"frame\":\"FindForm_frame__26yCh\",\"input\":\"FindForm_input__g_fmQ\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ children, title }) => {\r\n  return (\r\n    <section>\r\n        <div className=\"container\">\r\n        <h2>{title}</h2>\r\n            {children}\r\n         </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n\r\nexport default Section;","/*=======================ВАРИАНТ с Redux Toolkit=======================*/\r\n\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const addition = createAction('inputsForm/add');\r\nexport const deletion = createAction('contactData/del');\r\nexport const search = createAction('findForm/search');\r\n\r\n// export default { addition, deletion, search };\r\n// const actions = {\r\n//     addition,\r\n//     deletion,\r\n//     search\r\n// };\r\n// export default actions;\r\n\r\n\r\n/*==================ВАРИАНТ без Redux Toolkit==================*/\r\n\r\n// import actionsTypes from './contacts-types';\r\n\r\n// export const addition = value => ({\r\n//     type: actionsTypes.ADD,\r\n//     payload: value,\r\n// });\r\n\r\n// export const deletion = value => ({\r\n//     type: actionsTypes.DEL,\r\n//     payload: value,\r\n// });\r\n\r\n// export const search = value => ({\r\n//     type: actionsTypes.SEARCH,\r\n//     payload: value,\r\n// });\r\n\r\n\r\n","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { connect } from 'react-redux';  //вариант без использования хуков\r\nimport { useDispatch } from 'react-redux'; // при использовании хуков\r\nimport  {addition} from '../../redux/contacts/contacts-actions';\r\nimport s from './InputsForm.module.css';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\n// function InputsForm({contactToStore}) {    //вариант без использования хуков\r\nexport default function InputsForm() {         // при использовании хуков\r\n  const [subscriber, setSubscriber] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const [id, setId] = useState('');\r\n  const dispatch = useDispatch();    // при использовании хуков\r\n\r\n  const contactToStore = obj => dispatch(addition(obj));    // при использовании хуков\r\n\r\n  \r\n  const handleInputChange = e => {\r\n    switch (e.currentTarget.name) {\r\n      case 'subscriber':\r\n        setSubscriber(e.currentTarget.value);\r\n        setId(uuidv4());\r\n        break;\r\n      case 'number':\r\n        setNumber(e.currentTarget.value);\r\n        break;\r\n      default:\r\n        break;\r\n    };\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    // let obj = { subscriber, number, id };\r\n    // contactToStore(obj);\r\n    contactToStore({ subscriber, number, id });\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setSubscriber('');\r\n    setNumber('')\r\n  };\r\n\r\n  return (\r\n      <div className={s.frame}>\r\n      <form\r\n        onSubmit={handleSubmit}\r\n        className={s.form}\r\n        autoComplete=\"on\">\r\n            <h3>Name</h3>\r\n            <label >\r\n              <input\r\n                className={s.input}\r\n                type=\"text\"\r\n                name=\"subscriber\"\r\n                value={subscriber}\r\n                onChange={handleInputChange}  \r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                required\r\n              />\r\n            </label>\r\n            \r\n            <h3>Number</h3>\r\n\r\n            <label>\r\n                <input\r\n                className={s.input}\r\n                type=\"tel\"\r\n                name=\"number\"\r\n                value={number}\r\n                onChange={handleInputChange} \r\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                required\r\n              />\r\n            </label> \r\n          <button type=\"submit\" className={s.btn}>Add contact</button> \r\n        </form> \r\n      </div>\r\n    )\r\n  };\r\n\r\nInputsForm.propTypes = {\r\n  subscriber: PropTypes.string,\r\n  number: PropTypes.string,\r\n};\r\n\r\n/*====================ВАРИАНТ без использования хуков====================*/\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//     return {\r\n//       contactToStore: obj => dispatch(addition(obj))\r\n//     }\r\n// };\r\n\r\n// export default connect(null, mapDispatchToProps)(InputsForm);\r\n\r\n","export const getContactsItems = state => state.contacts.items;\r\nexport const getContactsFilter = state => state.contacts.filter;","import PropTypes from 'prop-types';\r\nimport s from './ContactData.module.css';\r\n// import { connect } from 'react-redux';    //вариант без использования хуков\r\nimport { useDispatch } from 'react-redux';\r\nimport {deletion} from '../../redux/contacts/contacts-actions';\r\n\r\n// const ContactData = ({contactObj, idToDel}) => {   //вариант без использования хуков\r\n    const ContactData = ({contactObj}) => {  // при использовании хуков\r\n    const dispatch = useDispatch();    // при использовании хуков\r\n    const idToDel = id => dispatch(deletion(id));   // при использовании хуков\r\n        \r\n    const deletedId = e => idToDel(e.target.dataset.key);\r\n    const {subscriber, id, number} = contactObj;\r\n    return (\r\n        <>\r\n            <p className={s.textItem}>\r\n                <span>{subscriber}:</span>\r\n                <span>{number}</span>\r\n            </p>\r\n            <button\r\n                className={s.btn}\r\n                type={\"button\"}\r\n                data-key={id}\r\n                onClick={deletedId}>\r\n                Delete\r\n            </button>\r\n        </>\r\n    );\r\n};\r\n\r\nContactData.propTypes = {\r\n  subscriber: PropTypes.string,\r\n  number: PropTypes.string,\r\n  id: PropTypes.string,\r\n};\r\n\r\nexport default ContactData;\r\n\r\n\r\n/*====================ВАРИАНТ без использования хуков====================*/\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//     return {\r\n//         idToDel: id => dispatch(deletion(id))\r\n//     }\r\n// };\r\n\r\n// export default connect(null, mapDispatchToProps)(ContactData);","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { connect } from 'react-redux';    //вариант без использования хуков\r\nimport { useDispatch } from 'react-redux';    // при использовании хуков\r\nimport {search} from '../../redux/contacts/contacts-actions';\r\nimport s from './FindForm.module.css';\r\n\r\n\r\n// const FindForm = ({findValue}) => {    //вариант без использования хуков\r\nconst FindForm = () => {                   // при использовании хуков\r\n    const [inputValue, setInputValue] = useState('');\r\n    const dispatch = useDispatch();  // при использовании хуков\r\n\r\n    const findValue = value => dispatch(search(value)); // при использовании хуков\r\n\r\n    const findInputChange = e => {\r\n        setInputValue(e.currentTarget.value);\r\n        findValue(e.currentTarget.value);\r\n    };\r\n\r\n    // const reset = (e) => setInputValue('');\r\n\r\n    return (\r\n        <div className={s.frame}>\r\n            <h3>Find contacts by name</h3>\r\n            <input\r\n                className={s.input}\r\n                type=\"text\"\r\n                name=\"find\"\r\n                value={inputValue}\r\n                onChange={findInputChange}\r\n                // onBlur={reset}\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                required\r\n            />\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default FindForm;\r\n\r\nFindForm.propTypes = {\r\n    inputValue: PropTypes.string\r\n};\r\n\r\n\r\n/*====================ВАРИАНТ без использования хуков====================*/\r\n\r\n// const dispatchFindValueToStore = dispatch => {\r\n//     return {\r\n//       findValue: value => dispatch(search(value))\r\n//     }\r\n// };\r\n\r\n// export default connect(null, dispatchFindValueToStore)(FindForm);","// import { useEffect } from 'react'; //не нужно с очень замороченой и пока непонятной записью в localStorage\r\nimport PropTypes from 'prop-types';\r\n// import { connect } from 'react-redux';  //вариант без использования хуков\r\nimport { useSelector } from 'react-redux'; // при использовании хуков\r\nimport { getContactsItems, getContactsFilter } from '../../redux/contacts/contacts-selectors';\r\nimport s from './ContactList.module.css'\r\nimport ContactData from '../ContactData';\r\nimport FindForm from '../FindForm';\r\n\r\n// const ContactList = ({ contactArr, findValue }) => {   //вариант без использования хуков\r\nconst ContactList = () => {\r\n    // const contactArr = useSelector(state => state.contacts.items);\r\n    const contactArr = useSelector(getContactsItems);  // при использовании хуков\r\n    // const findValue = useSelector(state => state.contacts.filter);\r\n    const findValue = useSelector(getContactsFilter);   // при использовании хуков\r\n\r\n    \r\n    //запись контактов в window.localStorage по \"рабоче-крестьянски\", без заморочек\r\n\r\n    //     useEffect(() => {\r\n    //     window.localStorage.setItem('contacts', JSON.stringify(contactArr));\r\n    //   }, [contactArr]); \r\n    \r\n\r\n    const tempContactArr = [...contactArr].sort((a, b) => a.subscriber.localeCompare(b.subscriber));\r\n\r\n     return (\r\n        <div>\r\n\r\n            <FindForm/>\r\n                \r\n            {contactArr && (<ul className={s.list}>\r\n                 {tempContactArr.filter(item => item.subscriber.toLowerCase().includes(findValue.toLowerCase())).map(item => {\r\n                    const { id } = item;\r\n                    return (\r\n                        <li key={id} className={s.listItem}>\r\n                            < ContactData contactObj={item} />\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>)}\r\n                \r\n        </div>\r\n    );\r\n};\r\n\r\nContactList.propTypes = {\r\n  id: PropTypes.string,\r\n};\r\n\r\nexport default ContactList;\r\n\r\n/*====================ВАРИАНТ без использования хуков====================*/\r\n\r\n// const mapStateToProps = state => {\r\n//     return {\r\n//         contactArr: state.contacts.items,\r\n//         findValue: state.contacts.filter\r\n//     }\r\n// };\r\n\r\n// export default connect(mapStateToProps)(ContactList);","import './App.css';\nimport Section from './componets/Section';\nimport InputsForm from './componets/InputsForm';\nimport ContactList from './componets/ContactList';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      \n      <Section title={\"Phonebook\"}>\n        <InputsForm/>\n      </Section>\n\n      <Section title={\"Contacts\"}>\n          <ContactList/>\n      </Section>\n\n    </div>\n  )\n};\n\nexport default App;\n","/*\r\n*ВАРИАНТ с Redux Toolkit\r\n*/\r\n\r\nimport { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {addition, deletion, search} from './contacts-actions';\r\n\r\n// const initialState = (window.localStorage.getItem('contacts')) && JSON.parse(window.localStorage.getItem('contacts')); \r\n\r\n// const items = createReducer(initialState, {   //первоначальная инициализация хранилища из window.localStorage по \"рабоче-крестьянски\", без заморочек\r\n\r\nconst items = createReducer([], {\r\n    [addition]: (state, { payload }) => {\r\n        if (state.findIndex(item => item.subscriber === payload.subscriber) !== -1) {\r\n            alert(`Абонент с именем ${payload.subscriber} уже существует!`);\r\n            return state;\r\n        };\r\n        if (state.findIndex(item => item.number === payload.number) !== -1) {\r\n            alert(`Такой номер ${payload.number} уже присвоен другому абоненту!`);\r\n            return state;\r\n        };\r\n        return [...state, payload];\r\n    },\r\n    [deletion]: (state, { payload }) => {\r\n        let tempArr = [...state];\r\n        tempArr.splice(tempArr.findIndex(item => item.id === payload), 1);\r\n        return [...tempArr];\r\n    }\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [search]: (_, { payload }) => payload\r\n});\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n});\r\n\r\n\r\n\r\n/*\r\n*ВАРИАНТ без Redux Toolkit\r\n*/\r\n\r\n// import { combineReducers } from 'redux';\r\n// import actionsTypes from './contacts-types';\r\n\r\n// const contactsItemsReducer = (state = initialState, { type, payload }) => {\r\n//     switch (type) {\r\n\r\n//         case actionsTypes.ADD:\r\n//             if (state.findIndex(item => item.subscriber === payload.subscriber) !== -1) {\r\n//                 alert(`Абонент с именем ${payload.subscriber} уже существует!`);\r\n//                 return state;\r\n//             };\r\n//             if (state.findIndex(item => item.number === payload.number) !== -1) {\r\n//                 alert(`Такой номер ${payload.number} уже присвоен другому абоненту!`);\r\n//                 return state;\r\n//             };\r\n//             return [...state, payload];\r\n        \r\n//         case actionsTypes.DEL:\r\n//             let tempArr = [...state]\r\n//             tempArr.splice(tempArr.findIndex(item => item.id === payload), 1)\r\n//             return [...tempArr];\r\n        \r\n//         default:\r\n//             return state;\r\n//     };\r\n// };\r\n\r\n// const contactsFilterReducer = (state = '', { type, payload }) => {\r\n//     switch (type) {\r\n        \r\n//         case actionsTypes.SEARCH:\r\n//             return payload;\r\n        \r\n//         default:\r\n//             return state;\r\n//     }\r\n// };\r\n\r\n// export default combineReducers({\r\n//     items: contactsItemsReducer,\r\n//     filter: contactsFilterReducer\r\n// });\r\n\r\n\r\n\r\n/*изначально store*/\r\n\r\n// const contactsInitialState = {\r\n//     contacts: {\r\n//         items: (window.localStorage.getItem('contacts')) && JSON.parse(window.localStorage.getItem('contacts')),\r\n//         filter: ''\r\n//     }\r\n// }\r\n\r\n/*изначально без combineReducers*/\r\n\r\n// const contactsReducer = (state = contactsInitialState, { type, payload }) => {\r\n//      switch (type) {\r\n//         case 'inputsForm/add':\r\n//             if (state.items.findIndex(item => item.subscriber === payload.subscriber) !== -1) {\r\n//                 alert(`Абонент с именем ${payload.subscriber} уже существует!`);\r\n//                 return { ...state }\r\n//             };\r\n//             if (state.items.findIndex(item => item.number === payload.number) !== -1) {\r\n//                 alert(`Такой номер ${payload.number} уже присвоен другому абоненту!`);\r\n//                 return { ...state }\r\n//             };\r\n//             return {\r\n//                 ...state,\r\n//                 items: [...state.items, payload]\r\n//             };\r\n        \r\n//         case 'contactData/del':\r\n//             state.items.splice(state.items.findIndex(item => item.id === payload), 1)\r\n//             return {\r\n//                 ...state,\r\n//             }\r\n        \r\n//         case 'findForm/search':\r\n//             return {\r\n//                 ...state,\r\n//                 filter: payload\r\n//             }\r\n        \r\n//         default:\r\n//             return state;\r\n//     }\r\n// };","/*=================ВАРИАНТ с Redux Toolkit=================*/\r\n\r\nimport { configureStore, combineReducers } from \"@reduxjs/toolkit\";\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\n\r\n/*вариант с OOOOOOOOOOOOOOOOчень замороченой и пока непонятной, но рабочей записью в localStorage*/\r\n\r\nimport { getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';  //для записи в локал сторидж\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n];\r\n\r\nconst persistConfig = {\r\n    key: 'localStorageContacts',\r\n    storage,\r\n};\r\n\r\nconst rootReducer = combineReducers({ contacts: contactsReducer });\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst store = configureStore({\r\n    reducer: persistedReducer,\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development' //devTools будет доступно только в процессе разработки (как и надо)\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nconst modStore = { store, persistor };\r\n\r\nexport default modStore;\r\n\r\n/*вариант с записью в localStorage по \"рабоче-крестьянски\", без заморочек*/\r\n\r\n// import { configureStore } from \"@reduxjs/toolkit\";\r\n// import contactsReducer from './contacts/contacts-reducer';\r\n\r\n// const store = configureStore({\r\n//     reducer: { contacts: contactsReducer }, // рутовый (корневой) редюсер создается автоматически под капотом toolkit\r\n//     devTools: process.env.NODE_ENV === 'development' //devTools будет доступно только в процессе разработки (как и надо)\r\n// })\r\n\r\n// export default store;\r\n\r\n\r\n/*========================ВАРИАНТ без Redux Toolkit========================*/\r\n\r\n// import { createStore } from \"redux\";\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n// import { combineReducers } from 'redux';\r\n// import { configureStore } from \"@reduxjs/toolkit\";\r\n// import contactsReducer from './contacts/contacts-reducer';\r\n\r\n// const rootReducer = combineReducers({\r\n//     contacts: contactsReducer\r\n// });\r\n// const store = createStore(rootReducer, /* preloadedState, */ composeWithDevTools());\r\n// export default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './App';\nimport modStore from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={modStore.store}>\n      <PersistGate loading={null} persistor={modStore.persistor}>\n        <App />\n      </PersistGate> \n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nconsole.log('Привіт, світ! Життя химерне!');\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"frame\":\"InputsForm_frame__3iZm-\",\"form\":\"InputsForm_form__2z0YQ\",\"input\":\"InputsForm_input__DLzc7\",\"btn\":\"InputsForm_btn__AW37s\"};"],"sourceRoot":""}